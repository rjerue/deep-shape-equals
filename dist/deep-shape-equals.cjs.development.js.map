{"version":3,"file":"deep-shape-equals.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * This is where we compare the shape of two objects\n * @param base one object to compare\n * @param test second object to compare\n */\nfunction compare(base: any, test: any, ignoreArrayOrder?: boolean): boolean {\n  //both keys must exist\n  //both keys must be of the same type\n  //both keys must either be, or not be, an array\n  if (\n    [base, test].includes(undefined) ||\n    typeof base !== typeof test ||\n    Array.isArray(base) !== Array.isArray(test)\n  ) {\n    return false; // negative case\n    //If both are arrays, we need to map through\n  } else if (test && Array.isArray(test) && Array.isArray(base)) {\n    // if arrays are of diff size, not the same shape\n    if (base.length !== test.length) {\n      return false;\n    }\n    // We may be doing some splicing later on with this\n    let baseList = [...base];\n    const result = !test\n      .map((elem, i) => {\n        // here we need to compare each elem in both arrays\n        if (ignoreArrayOrder) {\n          const index = baseList.map(e => compare(elem, e)).indexOf(true);\n          if (index === -1) {\n            // not found\n            return false;\n          }\n          baseList.splice(index, 1); //if found, removes from array to prevent repeats\n          return true;\n        }\n        return compare(elem, base[i]);\n      })\n      .includes(false); //if false, then bad\n    if (ignoreArrayOrder && baseList.length !== 0) {\n      return false;\n    }\n    return result;\n    // if it's an object, we go and do a recursive call\n  } else if (test && typeof test === 'object') {\n    return areObjectsSameShape([test, base], ignoreArrayOrder);\n  }\n  return true; //if no reason for things to be wrong, all set\n}\n\n/**\n * checks to see if objects given as args are of the same shape\n * @param objects Args to take in. Array\n * @param ignoreArrayOrder An optional parameter. If false, it will ignore the order of things in arrays, warning that this has unwanted side effects\n */\nexport function areObjectsSameShape(\n  objects: any[],\n  ignoreArrayOrder?: boolean\n): boolean {\n  if (objects.length < 2) {\n    return true;\n  }\n  const base = objects.pop(); //remove one object to serve as the base\n  const baseKeys = Object.keys(base); //we'll use the keys in a few places\n\n  //iterate through all args, compare to base\n  for (const obj of objects) {\n    const keys = Object.keys(obj); // get keys of current\n    const set = new Set([...keys, ...baseKeys]); // create a set of both keys\n    if (set.size !== baseKeys.length) {\n      //if set size of keys is same as key arr, ok\n      return false; //otherwise bad\n    }\n    for (const key of keys) {\n      // here, we'll compare each key, some recursion may happen\n      const ok = compare(obj[key], base[key], ignoreArrayOrder);\n      if (!ok) {\n        //bail if not ok\n        return false;\n      }\n    }\n  }\n  //this means no negative cases were found\n  return true;\n}\n"],"names":["compare","base","test","ignoreArrayOrder","includes","undefined","Array","isArray","length","baseList","result","map","elem","i","index","e","indexOf","splice","areObjectsSameShape","objects","pop","baseKeys","Object","keys","obj","set","Set","size","key","ok"],"mappings":";;AAAA;;;;;AAKA,SAASA,OAAT,CAAiBC,IAAjB,EAA4BC,IAA5B,EAAuCC,gBAAvC;;;;MAKI,CAACF,IAAD,EAAOC,IAAP,EAAaE,QAAb,CAAsBC,SAAtB,KACA,OAAOJ,IAAP,KAAgB,OAAOC,IADvB,IAEAI,KAAK,CAACC,OAAN,CAAcN,IAAd,MAAwBK,KAAK,CAACC,OAAN,CAAcL,IAAd,CAH1B,EAIE;WACO,KAAP,CADA;;GAJF,MAOO,IAAIA,IAAI,IAAII,KAAK,CAACC,OAAN,CAAcL,IAAd,CAAR,IAA+BI,KAAK,CAACC,OAAN,CAAcN,IAAd,CAAnC,EAAwD;;QAEzDA,IAAI,CAACO,MAAL,KAAgBN,IAAI,CAACM,MAAzB,EAAiC;aACxB,KAAP;KAH2D;;;QAMzDC,QAAQ,aAAOR,IAAP,CAAZ;QACMS,MAAM,GAAG,CAACR,IAAI,CACjBS,GADa,CACT,UAACC,IAAD,EAAOC,CAAP;;UAECV,gBAAJ,EAAsB;YACdW,KAAK,GAAGL,QAAQ,CAACE,GAAT,CAAa,UAAAI,CAAC;iBAAIf,OAAO,CAACY,IAAD,EAAOG,CAAP,CAAX;SAAd,EAAoCC,OAApC,CAA4C,IAA5C,CAAd;;YACIF,KAAK,KAAK,CAAC,CAAf,EAAkB;;iBAET,KAAP;;;QAEFL,QAAQ,CAACQ,MAAT,CAAgBH,KAAhB,EAAuB,CAAvB,EANoB;;eAOb,IAAP;;;aAEKd,OAAO,CAACY,IAAD,EAAOX,IAAI,CAACY,CAAD,CAAX,CAAd;KAZY,EAcbT,QAda,CAcJ,KAdI,CAAhB,CAP6D;;QAsBzDD,gBAAgB,IAAIM,QAAQ,CAACD,MAAT,KAAoB,CAA5C,EAA+C;aACtC,KAAP;;;WAEKE,MAAP,CAzB6D;GAAxD,MA2BA,IAAIR,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;WACpCgB,mBAAmB,CAAC,CAAChB,IAAD,EAAOD,IAAP,CAAD,EAAeE,gBAAf,CAA1B;;;SAEK,IAAP;;;;;;;;;AAQF,SAAgBe,oBACdC,SACAhB;MAEIgB,OAAO,CAACX,MAAR,GAAiB,CAArB,EAAwB;WACf,IAAP;;;MAEIP,IAAI,GAAGkB,OAAO,CAACC,GAAR,EAAb;;MACMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYtB,IAAZ,CAAjB;;;uBAGkBkB,OAAlB,kHAA2B;;;;;;;;;;;;QAAhBK,GAAgB;QACnBD,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAb,CADyB;;QAEnBC,GAAG,GAAG,IAAIC,GAAJ,WAAYH,IAAZ,EAAqBF,QAArB,EAAZ,CAFyB;;QAGrBI,GAAG,CAACE,IAAJ,KAAaN,QAAQ,CAACb,MAA1B,EAAkC;;aAEzB,KAAP,CAFgC;;;8BAIhBe,IAAlB,6BAAwB;UAAbK,GAAG,aAAT;;UAEGC,EAAE,GAAG7B,OAAO,CAACwB,GAAG,CAACI,GAAD,CAAJ,EAAW3B,IAAI,CAAC2B,GAAD,CAAf,EAAsBzB,gBAAtB,CAAlB;;UACI,CAAC0B,EAAL,EAAS;;eAEA,KAAP;;;;;;SAKC,IAAP;;;;;"}